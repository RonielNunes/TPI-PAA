• includes.h
    - Foi criado um arquivo .h chamado includes que irá conter as chamadas de todas as bibliotecas 
      usadas no trabalho prático, bem como a definição do SO para definir qual comando será utilizado
      para limpar o terminal (cls no windows e clear no linux);
    - Assim, ao invés de incluir a mesma biblioteca em vários arquivos diferentes, incluimos tudo
      no includes.h e posteriormente chamamos tal arquivo com as bibliotecas necessarias;

• Estrutura de Dados
    -A estrutura de dados é composta por uma quatro variáveis. A primeira variável é do tipo "Labirinto", 
    esse tipo é a renomeação de um duplo ponteiro para o tipo inteiro. Ela é usada para fazer a alocação
    da matriz, ou seja, essa variável se tornará uma matriz posteriormente.
    - As demais variáveis são do tipo inteiro e sçao elas: qtLinhas, qtColunas e qtChaves.
    Amazenando a quantidade de linhas, colunas que formam a matriz e a quantidade de chaves respectivamente.
   - A estrutura recebeu o nome de TipoLabirinto, além disso também foi feito nomeação do TipoApontador, que
   é um ponteiro para a estrutura criada.
   - Toda passagem de parâmetros serão por referência - eliminar cópias e consecutivamente complexidade de espaço

• Menu
    - O menu é executado sempre que a opção escolhida seja != de 0, por meio de um do-while;
    - Conta com a função linha, que printa 40x "=";
    - Conta também com a função textoInicial, que printa o titulo do algoritmo;
    - Após ser mostrado o texto inicial junto às linhas, é mostrado as opções do usuário
        - Opção esta que é retornada pela função escolhaUsuario para a main para assim executar o
          comando por meio de um switch/case

• Leitura de Arquivo
    - Após o usuario entrar com o nome do arquivo, é concatenada a string "./arquivos/" com o 
      nome digitado pelo usuario e armazenada, a nova string, na variavel "caminhoArquivo";
        - Essa concatenação se deve ao fato dos arquivos estarem em uma pasta separada "arquivos"
    - Após a definição do endereço do arquivo é tentada a leitura. Caso falhe, uma mensagem é
      mostrada na tela e o programa retorna para a main, caso contrário, prossegue com a 
      execução;
    - Por meio da função fscanf são armazenados os primeiros parâmetros, separados por espaço, em
      suas respectivas variáveis;
    - As demais linhas dizem respeito aos valores que irão compor a matriz, linhas essas que não
      apresentam espaço entre os valores, logo os valores serão armazenados em uma variável string;
        - Após isso, pegamos cada posição dessa string por meio de um for;
        - Fazemos o valor dessa posição - '0' para converter para inteiro;
        - Atribuimos esse inteiro para a posição i, j da matriz;
    - Fechamos o arquivo.

• limpaTela
    - Depois de definido o SO, esta função contem um if/else para definir qual comando será usado
      para limpar o terminal, portanto, basta chamar a funcao limpaTela;
        - Funcional no windows e linux

• inicializaLabirinto
    - A função inicialização tem como parametros as variaveis apLabirinto,linha, coluna e chave, 
    sendo respectivamente dos tipos "TipoApontador" e "inteiros" as três ultimas citadas. 
    - Utilizando a variável apLabirinto, foi preenchido os campos qtLinhas, qtColunas e qtChaves
    presente na estrutura criada, apartir dos parametros recebidos como parametro  da função.
    - Para fazer a alocação da matriz dinânica é utilizado a função calloc. Essa função, 
    nescessita de dois argumentos o número de variáveis a ser alocadas na memoria e o tamanho 
    em bytes do tipo da variavel que será alocada.

    - Execução da alocação da matriz

    Utilizando o ponteiro para a estrutura, tendo  referenciação da variável labirinto presente na
    mesma ,receberá a alocação da quantidade de linhas + 1, isso ocore pois essa primeira alocação
    se faz de inicio de um ponteiro para outro ponteiro que por sua vez aponta para a posicao que
    armazenar um valor. Assim perdemos uma posição por termos dois ponteiro, sendo nescessario o
    acrescimo de mais um em seu valor. 
    
    Para a alocação das colunas, temos que somar mais um também por causa da perda citada. Essa alocação
    utiliza-se de um for para passar por todas as linhas alocadas e apartir de cada linha é alocado um vetor 
    tendo a quantidade de colunas lidas do arquivo.
      
    Resumo apartir do primeiro ponteiro: A alocação é composta de um vetor de ponteiros que corresponde ao 
    primeiro indice da matriz, sendo que cada ponteiro aponta para o inicio de uma linha da matriz. Em cada 
    linha existe um vetor alocado dinamicamente.


• mostraLabirinto
  A função mostraLabirinto tem como parametro uma variável do tipo TipoApontador. O objetivo 
  dessa função é mostra o labirinto e os caminho feito pelo estudante para sair do mesmo caso
   possivel. Seu funcionamento se baseia com a utilização de funções auxiliares "textcolor" 
   para fazer a trasformação dos registros de caminhos no labirinto em algo visualmente mais 
   atrativo. É utilizado dois for's aninhados para percorrer a matriz que representa o 
   labirinto e com isso é feito a identificação dos compotente do labirinto: posição inicial do estudante;
  caminho feito até encontrar a saída; paredes e portas.

  A códificação de cores ficou da seguinte maneira: 
  BRANCO : identifica a posição inicial do estudante ao iniciar o labirinto;
  AZUL: identifica as paredes do labirinto;
  VERDE CLARO: partes do labirinto que o estudante poderia visitar, mas não visitou; 
  VERDE ESCURO: partes que o estudante visitou até encontra a saída;
  VERMELHO: faz a marcação da portas presente no labirinto.
 
• getPosicaoInicialEstudante
  A função getPosicaoInicialEstudante, tem como parametros a o apontador para a estrutura e mais duas 
  variáveis passadas por referência(x e y).  Essa função percorre o labirinto através de fors aninhados,
  buscando onde o valor 0 esta na matriz. Caso encontrado, temos a alteração dos valores das variáveis 
  x e y, recendo os indices i e j respectivamente. 

• verificaPosicao
  A função verificaPosicao tem como parametros a variável apLabirinto do TipoApontador, linha e coluna 
  do tipo inteiro. Essa função verifica se uma determinda possição indicada pelos parametros
  recebidos linha e coluna é valida para o estudante caminhar. Caso o estudante possa caminhar pela 
  coordenada definida é retornado o valor de 1, caso contrário 0.

  -Condições para caminho:
    A coordenada indicada no labirinto ter o valor zero ou valor um. Valor zero indica posição inicial 
    no labirinto, valor 1 indica posição livre para acesso. 
    Outra condição verificada como possivel coordenada de movimento é caso a posição indicada ter o valor
    3 e a quanitdade de chaves ser maior que 0. Valor 3 indica que ali temos uma porta, caso essa condição
    seja antendida é feito a utilização de chave se o estudante tiver, sendo descatado essa chave
    (decrementada na quantidade de chaves).

    - Como especificado no trabalho, o estudante deve recuperar a chave se passar por uma porta e retornar
      por ela. Para tratar isso, ao retornar nas chamadas recursivas, se a posição for uma porta, há um incremento
      na quantidade de chaves.
  
• movimenta_estudante
  - contém:
    - posição inicial (x0, y0);
    - solução do problema: 1 se existe saída e 0 se não existe;
    - qtMovimentos
    - qtTentativas
    - coluna final - coluna que chegou na primeira linha
    - movimentos - 2 vetores de 0 e 1, indicando a movimentação do estudante
      - bem semelhante a ideia do passeio do cavalo visto em auxiliares
      - ordem da movimentação: cima, direita, esquerda, baixo
  1º: Inicialmente busca a posição inicial no labirinto por meio da função getPosicaoInicialEstudante;
  2º: atribui a variável solução a chamada da função movimenta_estudante_interno
    - se solução = 1: apresenta saída
    - se solução = 0: não apresenta saída

• movimenta_estudante_interno
  - Função que retorna 1 se a movimentação foi correta e 0 se não for. Como apresenta estrutura recursiva, ao
  final das chamadas, o resultado será: 1 se possui caminho até a saída e 0 se não possuir saída;
  - A cada chamada recursiva o parâmetro qtTentativas é incrementado e sempre que a posição for válida para 
  se movimentar, o parametro qtMovimentos é incrementado também;
  - Para marcar as posições já caminhadas: fundamento do backtracking, atribuímos 0, no caso da posição ser
  0 (posição inicial), 3 se for uma porta e 4 se for uma posição válida para caminhar;
  - verifica a cada chamada se a linha == 0 (primeira linha), caso seja, retorna 1 e salva a coluna chegada,
  caso contrário executa a chamada recursiva em 1 for
  - Por que 1 for?
    - como são 4 possibilidades de movimentos a partir de uma posição, são executadas QT_MOV (4) vezes
    chamadas recursivas com aquela determinada posição, para assim, tentarmos todas as direções
    - para podermos incrementar o vetor movimentoLinha e movimentoColuna
  - após a chamada recursiva, caso a posição seja 3, há um incremento no numero de chaves
    - isso acontece (e vai acontecer na situação em que) pois ele passou por uma porta, percebeu q nao tinha 
    saída e voltou pela mesma porta, pegando a chave

  
• Observações - fazer após terminar o TP
    - Retirar printfs de debug e fazer comentários pertinentes
    - Acrescentar printf na funcao getPosicaoInicialEstudante = "O estudante esta inicialmente na posicao x, y